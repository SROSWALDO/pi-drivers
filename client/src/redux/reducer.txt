// Definición del Reducer
const initialState = {
    drivers: [], // Estado inicial con un arreglo vacío de conductores
    drivers_copy: [],
    teams: [],
}
const reducer = (state = initialState, action) => { // Define el reducer que maneja las acciones
    switch (action.type) {
        case "GET_DRIVERS": // Maneja la acción GET_DRIVERS
            return {
                ...state, // Retorna una copia del estado actual
                drivers: action.payload, // Actualiza el estado con los conductores obtenidos
                drivers_copy: action.payload
            }
        case "GET_TEAMS":
            return {
                ...state,
                teams: action.payload,
            }    
        case "DRIVERS_FILTER":
            return{
                ...state,
                drivers: action.payload,
                drivers_copy: action.payload,
            }
            case "ORDER_BY_NAME":
                const order_copy = [...state.drivers];
                if(action.payload === "Alphabetic Order") {
                    order_copy.sort((a, b) => a.name.localeCompare(b.name));
                }
                if (action.payload === "A" ){
                    order_copy.sort((a, b) => a.id - b.id);
                } 
                if (action.payload === "D" ){
                    order_copy.sort((a, b) => b.id - a.id);
                }
                return {
                    ...state,
                    drivers: order_copy
                };
        case "ORDER_BY_AGE":
        return{
            ...state,
            drivers: action.payload
        }
            case "FILTER_BY_APIDB":
                if(action.payload === "Order by Source") {
                return{
                    ...state,
                    drivers: state.drivers_copy,
                }
            }
                else if (action.payload === "Api" ){
                    const filteredApi = state.drivers_copy.filter((driver)=> typeof driver.id === "number" );
                    return {
                        ...state,drivers: filteredApi
                    }
                    
                } else if (action.payload === "DB" ){
                    const filteredDB = state.drivers_copy.filter((driver)=> typeof driver.id === "string" );
                    return {
                        ...state,drivers: filteredDB
                    }
                    
                }

                case 'ORDER_BY':
                let orderedDrivers = [...state.drivers_copy]; // Utiliza la copia original de los conductores

                switch (action.payload) {
                case 'Alphabetic Order':
                    orderedDrivers.sort((a, b) => a.name.localeCompare(b.name));
                    break;
                case 'A':
                    orderedDrivers.sort((a, b) => a.name.localeCompare(b.name));
                    break;
                case 'D':
                    orderedDrivers.sort((a, b) => b.name.localeCompare(a.name));
                    break;
                case 'age ⬇':
                    orderedDrivers.sort((a, b) => getAgeFromDOB(a.dateOfBirth) - getAgeFromDOB(b.dateOfBirth));
                    break;
                case 'age ⬆':
                    orderedDrivers.sort((a, b) => getAgeFromDOB(b.dateOfBirth) - getAgeFromDOB(a.dateOfBirth));
                    break;
        case 'Api':
             // Filtrar conductores por fuente API
             const apiDrivers = state.drivers.filter(driver => typeof driver.id === 'number');
             return {
                 ...state,
                 drivers: apiDrivers
             };
        case 'DB':
            // Filtrar conductores por fuente DB
            const dbDrivers = state.drivers.filter(driver => typeof driver.id === 'string');
            return {
                ...state,
                drivers: dbDrivers
            };
        default:
            // No hacer nada si el tipo de orden es desconocido
            break;
    }

    return {
        ...state,
        drivers: orderedDrivers
    };                  
        default:
            return {...state}; // Retorna el estado actual si la acción no coincide
    }
}
export default reducer; // Exporta el reducer como el valor por defecto











export const orderByName = (orderType) => {
    return {
        type: ORDER_BY_NAME,
        payload: orderType,
      };
};